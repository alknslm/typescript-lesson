--Tip Kullanımı
let age: number = 25;
**web servislerden gelen tipini bilmediğimiz değerler için  ""let age : any;""

Union Types
let age : number | string | = true ----> Bir değişken için birden fazla tür verilebilir.

Literal Type
let statusResult : 'pending' | 'approved' | 'rejected'; ---> bu değerlerden bir tanesi setlenebilir başkası kabul edilmez.

Array
let names : string[] = ["Ahmet", "Selim", "Mehmet"];
let names : Array<string> = ["Ahmet", "Selim", "Mehmet"];   İki şekilde de array kullanılabilir.

Karışık elemanlı dizi
let mixedArray : (string | number)[] = ["Ali", 1, 2, "Mehmet"];

-----------------------------------------------------------------------

  //! PARTIAL - REQUIRED - READONLY- PICK - OMIT
  //* PARTIAL   -> interface ile alınan datalardan ne kadardını yazarsan o kadarını kabul eder. Olmayanı hata olarak göstermez (olsada olur olmasada)  
  // //? const kullanici1 : Partial<Kullanici>
  //* REQUIRED  -> soru işaretli olsa da zorunlu alan gibi davranır (name? : string) required yazınca zorunlu hale gelir
  //* READONLY  -> data class içinde yazanlar hariç dışarda nveri değiştirilmesine izin vermez kullanici1.name = "ali" yazılmaz.
  //* PICK      -> sadece bir tane attribute varmış gibi davran.
  //? const kullanici1 : Pick<Kullanici, "name">  sadece name varmış gibi kabul eder.
  //* OMIT      -> buda yazılan attribute dışındaki değerleri al demek
  //? const kullanici1 : Omit<Kullanici, "name"> name dışındaki diğer değerleri al


  ------------------------------------------------------------------------
  HOOKS

  hooks oluştururken "use" ile başylaan isimlendirme kullanmak genel geçer kural.
  uygulama içinde birçok yerde kullanılabilecek logic şeyler için tanımlanır.

  ----------------------------------------------------------------------
  FORMIK & YUP

  Form uygulaması geliştirirken ki kontrolleri kolaylaştırır. Mail şifre vs.
  FORMIK ile form ekranı oluştur. YUP ile kontrolleri sağla.
      npm install formik --save
      npm i yup
  Formik ile inputlarla yapılan veri girişleri kontrol edilir. Yup ile yapılandırılımş requirmentlar ile kontrollerden sonra veriler uygun değilse hata mesajları formik'e gönderilir.

    FORMİK
    const { values, errors, handleChange, handleSubmit } = useFormik({ //*Formik içinden gelen değerler object distructing ile alıyoruz
        initialValues: {
            email: '',
            age: '',
            password: '',
            confirmPassword: '',
            term: ''
        },
        validationSchema: registerFormSchemas, //*Formik için kendi oluşturduğumuz registerFromSchemas yup'unu verdik.
        onSubmit: submit
    });

    YUP
    export const registerFormSchemas = yup.object().shape({
    email: yup.string().email("Geçerli bir email adresi giriniz").required("Email adresi zorunlu"),

    age: yup.number().positive("Poizitif bir değer giriniz").integer("Tam sayı giriniz").required("Yaş alanı zorunulu"),

    password: yup.string().required("Şifre alanı zorunlu"),

    confirmPassword: yup.string().required("Şifre tekrarı zorunlu").oneOf([yup.ref('password', yup.password)], "Şifreler eşleşmiyor"),

    term: yup.boolean().required("Lütfen sözleşmeyi onaylayınız")
})
  

